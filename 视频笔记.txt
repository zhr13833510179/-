
视频笔记
外边距居中对齐：margin: 0 auto;让盒子的 左右改为auto(必须有宽度);

上下垂直合并：（以最大的为准） 解决方法：避免开；

镶嵌合并（塌陷）解决放大：border、padding、overflow:hidden;

浮动:让多个块级元素一行显示（布局用）
标准流：正常的显示方式 块级一行显示一个 行内元素一行显示多个；
浮动是脱标的：1.如果在父盒子里面 是不会超过内边距和边框的                范围；
	      2.如果子盒子有一个浮动了，其余的子盒子都应                该浮动；

清除浮动：
1.额外标签法：优点：通俗易懂，便与书写。
              缺点：添加许多无意义的标签，结构化较差。
2.overflow清除法：可以给父级元素添加：overflow值为(hidden、auto、scroll)都可以实现；
优点：代码简洁；
缺点：内容增多时容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素；
 
3.伪元素清除法：使用after伪元素清除浮动：
:after方式为空元素的升级版，好处是不用单独加标签了；
使用方法：.clearfix:after{content:“”;display:block;height:0;clear:both;visibility:hieen;}
.clearfix{*zoom:1;}     IE6、7专有
优点：符合闭合浮动思想，结构语义化正确；
缺点：由于TE6-7不支持：after，使用zoom：1触发haslayout；

使用before和after双伪元素清除浮动：
使用方法：
.clearfix:before,clearfix:after{
	content:“”;
	display:table;（这句话可以出发BFC BFC可以清除浮动）
}
.clearfix:after{
clear:both;
}
.clearfix{
*zoom:1;
}
定位由：定位模式和边偏移两部分；

静态定位（position:static）
唯一的用处：取消定位；

相对定位（position:relative）
1.相对定位最重要一点是：他可以通过边偏移移动位置，但原来的位置（继续占有）；
2.每次移动都以自己左上角为基点移动；（相对于自己位置移动）

绝对定位（position:absolute）
绝对定位：可以通过偏移移动位置，但是他完全脱标，完全不占位置。（从当前屏幕出发）

若父亲没有定位，以当前屏幕为准；
若父亲有定位，以父亲当前尺寸为准；

绝对定位是将元素依据最近的已经定位（绝对、固定、相对定位）的父元素（祖先）进行定位；

子绝父相（口诀）
这句话的意思是 自己用绝对定位的话，父级要用相对定位。
就是说，子级是绝对定位，父亲只要是定位即可（不管父亲是绝对定位还是相对定位，甚至是固定定位都可以），就是说，子绝父绝，子绝父相都是正确的。

浮动压不住文字，浮动（半脱标）；绝对定位：（完全可以）；

绝对定位的盒子水平居中/垂直居中（算法）
普通盒子是左右margin改为auto就可实现,但是对于绝对定位就无效了。
定位的盒子水平居中和垂直居中有一个算法：
1.首先left50%  父盒子一半的大小；
2.然后用自己的左外边距，宽的负一半就可以了margin-left；

定位的模式转换:
跟浮动一样,元素添加绝对定位和固定定位之后，元素也会发生变换，都转换为行内块模式，行内块的宽和高都   由内容决定。
因此比如行内元素，如果添加绝对定位或者固定定位浮动后，可以不用转换模式，直接给高和宽就行。
绝对定位和固定定位还有浮动都可以模式转换为inline-block；
相对定位不可以模式转换；

z-index:
1.z-index的默认属性值是:0,取值越大，定位原宿在层级元素中越居上；

display:设置或检查对象是否及如何显示；

display:none隐藏对象 与他相反的是display:block它不仅是显示隐藏的对象，还是转换为块级元素。

特点：隐藏时候（不占位）；

visibility: 可见性
设置或检查是否显示对象

visible:对象可视；

hidden：对象隐藏；
隐藏之后继续（占位）；

overflow:vislble(不隐藏溢出部分)
overflow:auto(只把加为滚动条)
overflow:hidden(溢出部分隐藏)
overflow:scroll(不超出也总有滚动条)

鼠标样式：
<ul>
<li style="cursor:default;">（我是小白）
<li style="cursor:text;">（我是文本）
<li style="cursor:move;">  （我是移动）
<li style="cursor:pointer;"> （我是小手）

取消轮廓线：
outline: none;

防止拖拽：
resize: none;

vertical-align:处置对齐
顶线:top；
中线:middle;
基线:baseline;
底线:buttom；

vertival-align:不影响块级元素中的内容对齐，他只针对行内元素和行内块元素，特别是行内块元素，通常用来控制图片/表单与文字对齐。

省略号写法：
white-space:nowrap 强制在同一行上显示文本，直到文字结束或者强行遭遇br为止；
overflow: hidden; 超出部分隐藏；
text-overflow:ellipsis 溢出部分用省略号代替；
如果想末尾有省略号，这三个代码缺一不可。

为什么要有精灵技术：
为了减少服务器请求次数；
他实现的本质是什么：
（把多个背景小图片整biaod合到一张大图上的过程)称之为精灵图；
精灵图的使用：
先量出要用的小图的大小，再用x或者,y去-他的数值。（背景定位）

www.chinaz.com   一个神奇的网站 所有东西都免费 （站长之家）

CssStats 是一个在线的CSS代码分析工具 网址:http://www.cssstats.com/

更全面的（W3C统一验证工具） 网址:  http://validator.w3.org/unicorn/ （可以检查本地文件）

HTML5 有兼容性问题 IE9以下 不支持

HTML新增标签与特性

header标签 定义文档头部
nav标签 定义导航栏部分
footer标签 定义页脚底部
article标签 定义文章部分
section标签 定义文档中的节（section、区段）可以当做DIV来使用 类似于DIV
aside标签 定义其所处内容之外的内容 侧边

表单域元素分组: 配合legend使用
{fieldset
	<legend> 用户登录 </legend> 标题作用

	表单域部分
	}

html5新增表单

email 输入邮箱格式
tel 输入手机号码格式
url 输入网址格式
number 输入数字格式语）
range 输入滑块格式
time 输入小时分钟格式
date 输入日期格式
datetime 输入时间格式
month 输入月年格式
week 输入星期 年格式

html5新增表单属性

placeholder 占位符 当用户输入文字时 里面文字消失
autofocus 规定当页面加载时 元素input 应自动获得焦点
multiple 多文件上传
required 必须填 内容不能为空 提交表单时候用
accesskey 规定激活（使元素获得焦点） 元素的快捷键 自己定

视频音频播放 

audio 音频
video 视频
都是有 autoplay（自动播放） contronls （播放按钮） Loop循环播放
source标签 （他没有闭合标签） 用来装src里面的属性（多装）比如一个mp3不支持 就换opp的格式

css3新增选择器

结构（位置）伪类选择器

：first-child 选取属于其父元素的首个子元素的指定选择器
：last-child 选取属于其父元素的最后一个子元素的指定选择器
：nth-child（n） 匹配属于其父元素的第N个子元素，不伦元素的类型 （奇数是odd 偶数是even）

属性选择器

选取标签带有某些属性的选择器 我们称为属性选择器
ctrl+6 是开头 ctrl+4 是结尾 直接等于是选取所有带有class的

css3盒子模型
css2的盒子模型即可指定为content-box就是说（盒子大小为width+padding+margin+border=宽）向外扩展
css3的盒子模型指定为border-box（盒子大小为width 不论加什么都是由外向内不超出宽度）向内扩展

vertical-align: middle 文字基线对齐（自由发挥）
如果加了转换为行内块不加这个里面调图片位置文字会跟着动

转换ico图标
1.先切图尽量图片为透明图片 png格式
2.把图片转换为图标 http://www.bitbug.net/
3.把ico图标放入 网站根目录下 之后利用<link rel="shortcut icon" href="favicon.ico" /

cutterman ps插件 很好用的切图工具

链接a是行内元素 必须加display:block 转换为块级元素要不高或者行高不管用

过度效果（transition）
过度写到本身上 （谁做过渡动画，写到谁身上）
transform: skew(deg) 倾斜

仿站小工具 （超好用）  

fiex伸缩布局 （display:flex）可以随着浏览器宽度的变化而变化 相当于百分比宽度 而且也能变换为垂直排列
min-width 最小宽度 max-width反最大宽度
fiex-direction: column 垂直排列
fiex-direction: row 水平排列

perspective: 500px;（三D效果） 后面属性越大离着越远 越近越大看的更清晰。

backface-visibility: hidden（定义不面向屏幕是否可见）就是说背过去以后不显示



第一天视频
js（部分） javascript 简称：js分三个部分：
1. ECMAScript 标准--  js的基本语法
2. DOM----Document Object Model   文档对象模型
3. BOM----Browser object model 浏览器对象模型
            （BOM和DOM以后学习用  暂时先学js基本语法）

js是什么？
是一门脚本语言；
是一门解释性语言；
是一门动态类型语言；
是一门基于对象的语言。

html,css是文本标记语言；

编辑语言:需要把代码翻译成计算机所认知的二进制语言（0,1），才能够执行；
脚本语言:不需要编译，直接执行；
常见的脚本语言：t-sql（数据库），cmd；

流程
电脑的硬件--->系统--->客户端的程序--->代码
电脑的硬件--->系统--->浏览器--->js代码（js的理解）
js原名不是javascript, 而是Livescript

js的作用？
解决用户和浏览器之间的交互问题

js现在可以做什么？
1.网页特效
2.服务端开发
3.命令行工具
4.桌面程序
5.app
6.控制硬件-物联网
7.游戏开发  

js代码可以分三个地方写：
1.在html的文件中，script的标签中写js代码
2.js代码可以在html的标签中写---
3.在js文件中可以写js代码，但是需要在html的页面中引入 script的标签中的src="js的路径"

在webstorm工具中打开页面:
1.右上角有浏览器图标，直接点击即可
2.快捷键: Alt+F2 回车或者上线键选择
 
js代码的注意问题
1.在一对script的标签中有错误的js代码，那么该错误的代码后面的js代码不会执行
2.如果影响第一对的script标签中有错误，不会影响后面的script标签中的js代码
3.script的标签中可以写什么内容 type="text/javascript"是标签中的标准写法 Language="Javascript"都可以
但是，目前在我们html页面中，type和Language都可以省略，原因:html是遵循h5的标准

4.有可能会出现这种情况:script标签中可能同时出现type和Language的写法

5.script标签在页面中可以出现多对
6.script标签一般是放在body的标签的最后的，有的时候会在head标签中，目前讲课的时候都在body标签的后面（body中的最后）
7.如果script标签是引入外部js文件的作用，那么这对标签中不要写任何js代码，如果要写，重新写一一对script标签，里面写代码

变量

什么是变量
变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据

为什么要使用变量
使用变量可以方便获取或者修改内存中的数据

如何使用变量
var声明变量
var age;
...

变量的赋值
var age;
age = 18;
...
 
同时声明多个变量
var age, name, sex;
age = 10;
name = "zs";
...

同时声明多个变量并赋值
var age = 10, name = "zs";
...

变量的注意问题---变量名的命名规范，要遵循驼峰命名法
1.变量的名要有意义，
2.变量有一定的规范:一般以字母，$符号，下划线开头，中间或者后面可以有$符号，字母，数字
3.变量名一般都是小写的                  
4.变量名如果是多个单词，第一个单词的首字母是小写的，后面的所有的单词的首字母都是大写的，这种命名方式成为：驼峰命名法
5.不能能用关键字（系统自带的一些单词，不能使用）
6.如果单词不会用拼音，必须遵循驼峰命名法

变量交换的第一个思路：使用第三方的变量进行交                                                                                                                                                           
var num1=10;
var num2=20;
把num1这个变量的值取出来放进temp中；
var temp=num1
把num2这个变量的值取出来放在num1里；
var num1=num2;
把temp变量的值取出来放在num2变量中;

第二种方式交换：一般适用于数字的交换 
var num=10;
var num=20;
把num1的变量中的值和num2变量中的值，取出来相加，重新赋值给num1和num2;
var num1=num1+num2;现在是30
num1变量的值和num2变量的值取出来，相减的结果重新赋值给num2
var num2=num1-num2;
num1变量的值和num2变量的值取出来，相减的结果重新赋值给num1
var num1=num1-num2

ctrl+alt+L--->格式化代码（设置代码有很好的格式，有错误的代码 没有效果）
注意：变量的名字不可以重复

扩展的变量的交换：只需要看代不需要理解---位运算

var num1=10;
var num2=20;
num1=num1^num2;
num2=num1^num2;
num1=num1^num2;


注释

注释：是解释代码的含义，给其他的程序员看的
注释的方式：
1.单行注释 //
2.多行注释 /**/

单行注释：一般用在一行代码上面
多行注释：一般用在函数或是一段代码的上面

js中的原始数据类型：number,string,boolean,null,undefined,object

number：数字类型（整数和小数）
string：字符串类型（的值一般都是用单引号或者双引号括起来的）
boolean:布尔类型（值只有两个，true（真1），false（假0））
null：空类型，值只有一个：null,一个对象指向为空了，此时可以赋值为null
undefined：未定义，值只有一个：undefined
什么情况下结果是udefined
变量声明了，没有赋值，结果是undegined
函数没有明确返回值，如果接受了，结果也是undefined
                                                        如果一个变量的结果是undefined和一个数字进行计算，结果:NaN不是一个数字，也没有意义
object:对象--->

如何获取这个变量的数据类型是什么
typeof 变量名
typeof（变量名）

二进制 遇到二进一
八进制 遇到八进一 （以0开头）
十进制 最长看到得数 （01234567）
十六进制 遇16进1 （以0x开头）

数字类型有范围:最小值和最大值
console.log(Number.MAX_VALUE)
console.log（Number.MIN_VALUE）

不要用小数去验证小数 js的
var x=0.1;
var y=0.2;一个bug 不会得到确切的数
var sum=x+y;
console.log(sun==0.3)

不要用NaN去验证NaN
var num;
console.log（num+10==NaN）
也就是说 console.log（"您好"=="我好"）

如何验证这个结果是不是NaN，应该使用isNaN（变量名）

var num; 变量声明了， 没有赋值， 结果是:undefined
是不是一个数字--->不是一个数字吗？ NaN--->不是一个数字
console.log（isNaN(10)）验证的是false 答案是是数字

判断结果不是一个数字可以使用isNaN
var num;
var sum=num+10; NaN
console.log(sum);
console.log(isNaN(sum)); 不是数字为true,是数字结果为false

字符串类型
字符串可以使用单引号或者双引号
字符串长度如何获取？ 变量名.length

html中的转义符: &lt; &gt; &nbsp;
js中的字符串里也有转义符
\b   退格
\f   走纸换页
\n   换行
\r   回车
\t   横向跳格
\'   单引号
\"   双引号
\\   反斜杠

字符串的拼接：使用+可以把多个字符串放在一起
var str1="您好";
var str2="我好";
console.log(str1+str2);

只要有一个是字符串，其他是数字，那么结果也是拼接，不是相加
如果有一个是字符串，另一个不是字符串，使用- 号，此时会发生计算
当这类型中有- 或者* （浏览器会帮助我们自动的把字符串转换成了数字类型，这种方法叫：隐式转换）
console.log（str1-str2）

布尔类型：的值有两个，一个是true（真）,一个是false(假)

类型转换：
一 其他类型转数字类型
1.parseInt()转整数
2.parseFloat()转小数
3.Number();转数字
Number要比上面两个严格
二 其他类型转字符串类型
1.如果变量有意义调用.toString()使用转换
2.如果变量没有意义使用String（转换）
三 其他类型转布尔类型
Boolean（值）
console.log(Boolean(1));  true
console.log(Boolean(0));  false
console.log(Boolean(11));  true
console.log(Boolean(-10));  true
console.log(Boolean("呵呵"));  true
console.log(Boolean(""));  false
console.log(Boolean(null));  false
console.log(Boolean(undefined));  false

运算符:
算数运算符:+ - * / %
算数运算表达式:由算数运算符链接起来的表达式
一元运算符:这个操作符只需要一个操作数就可以运算的符号  ++  --
二元运算符:这个操作符需要两个操作数就可以运算
三元运算符:? :
如果++在前面：如 num++ 和后+ and   前减和后减
如果++在前面：如 num++ +10参与运算 先参与运算，在自身+1
如果++在后面：日 ++Num 先自身+1 在参与运算
复合运算符: += -= *= /= %=
复合运算表达式:由复合运算符链接起来的表达式
关系运算符: > <   >=   <=  ==不严格的  ===严格的  !=不严格的  !==严格的不等
关系运算表达式:由关系运算符链接起来的表达式
关系表达式的结果是布尔类型  
逻辑运算符: 
&&---逻辑与--并且
//---逻辑或--或者
!---逻辑非---取反--取非--相反的
逻辑运算表达式:由逻辑运算链接起来的表达式
表达式1&&表达式2
如果有一个为false,整个的结果就是false
表达式1//表达式2
如果有一个为true，整个结果为true
!表达式1
表达式1的结果是true,整个结果为false
表达式1的结果是false,整个结果是true

赋值运算符:  =  +=  -=  *=  /=  %=

字面量: 把一个值直接赋值给一个 变量
var num=10;


第二天视频:
流程控制
1.顺序结构：从上到下，从左到右执行的顺序，就叫做顺序结构
2.分支结构：if语句，if-else语句，if-else if-else if...语句，switch-case语句，三元表达式语句
3.循环结构：while语句循环，do-while循环，for循环，还有for-in循环.

var age=prompt（"请输入您的年龄"）;弹框---并且有输入，输入的内容在age变量中

三元表达式
运算符号：? :

语法
var 变量=表达式1？表达式2：表达式3
执行过程：
表达式1的结果式true还是false，如果是true则执行表达式2，然后把结果给变量
如果表达式1的结果式false，则执行表达式3，把结果给变量

总结:大多数情况，使用is-else的语句都可以用三元表达式的方式来表示


案例 求闰年
问：闰年是公历的名词，能被4整除但不能被100整除，或能被400整除的年份极为闰年；

var year=2016  (证，求2016是否为闰年)
if(year%4==0&&year%100!=0||year%400==0){
  console.log("闰年")   如果满足即为闰年
}else{
  console.log("平年")  如果不满足即为平年
}


switch case 的注意问题
default后面的break是可以省略的
default也可以省略

switch-case 语句中和case后面的值比较的时候使用的是严格的模式
break是可以省略的


分支语句总结:
if语句:一个分支
if-else语句：两个分支，最终只执行一个分支
if-else if-else if...语句：最终只执行一个
switch case语句：多个分支最终也会执行一个(必须要有break)
三元表达式:和if-else语句是一样的
什么时候用if-else if...:一般是对范围的判断
什么时候用switch-case语句:一般是对具体的值得判断

如果有多个分支，是针对范围的判断一般选择if-else if...的语句

如果有多个分支，是针对具体的值判断，一般选择用switch-case的语句


循环的执行过程:
先判断条件是否成立,(条件的结果是true还是false),如果是false,那么循环的代码(while的大括号中的代码都不执行),如果是true,那么先执行循环体,然后执行计数器,然后,直接去--->循环的条件,在判断是否成立,成立则继续执行循环,否则跳出循环,执行完循环体之后,计数器加1,然后再去循环的条件,判断,成立则循环,否则跳出循环.
while循环不一定要有计数器

for循环
语法:
for(表达式1,表达式2,表达式3,){
	循环体
}

执行过程
先执行一次表达式1,然后判断表达式2,如果不成立则直接跳出循环,
如果表达式2成立,执行循环体的代码,结束后,跳到表达式3执行,然后,跳回到表达式2,,判断表达式2是否成立,不成立,则跳出循环.
如果表达式2成立,则执行循环体,然后再跳到表达式3,再跳到表达式2,判断是否成立,一直如此.

随着行数的增加 每行的星星个数再加一（列是随着行的循环次数变化而变化）
   

调试：调试代码
调试:写代码---打开浏览器---F12（开发人员工具）---sources---双击文件---在某一行代码前面点一下(出现的东西就是断点)

调试代码的作用
想要看看代码具体走到哪一步,简单来说（观察一下这个变量的值是多少,或者这行代码执行后效果如何）



复习:
无论是前+还是后+只要参与运算,结果可能就不太一样
如:
var num=10;
var sun= num++ +10;
++在后面时,先参与运算,然后自身加一
var num=10;
var sun= ++num +10;
++在前面,先自身加一,然后在参与运算

流程控制:代码的执行过程
1. 顺序结构:代码的执行顺序:从上到下,从左到右(不严谨)
2. 分支结构:  if, if-else, if-else if, switch-case, 三元表达式
3. 循环结构: while循环 , do-while循环 , for循环 , for-in循环

总结分支:
如果有一个分支,就用if
如果有两个分支,就用if-else
如果多个分支,一般是范围的,推荐使用if-else if
如果多个分支,一般是具体的值,推荐使用 switch-case



总结循环:
while:先判断后循环,有可能一次循环都不执行
do-while:至少执行一次循环体,在判断
for循环:知道了循环的次数,推荐使用for循环

调试:是为了找代码的错误和问题所在
断点,不加断点,就不方便调试


第一题:
本金10000元存入银行,年利率是千分之三，每过一年将本金和利息相加作为新的本金.
计算五年后,获得本金是多少.

var monay=10000;
var nianLiLv=0.003;
for(var i=1;i<=5;i++){
monay=monay+monay*nianLiLv
}
document.write(monay)



第二题:
斐波那契数列  规律（1,1,2,3,5,8,13,21,34,,55,89,144）
前两个月数相加的值等于第三个月数的值

如:求第三个月的值
var num1=1;  第一个月的
var num2=1;  第二个月的
var sum=num1+num2;  第三个月的

求第四个月的
var num1=num2;  第二个月的
var num2=sum;  第三个月的
var sun=num1+num2;  第四个月的

求斐波那契第12月的值
var num1=1;第一个月的
var num2=2;第二个月的
var sum=0;
i=3   意思是让他从第三个月开始循环
for(var i=3;i<=12;i++){
	sum=num1+num2;  第三个月的值
	num1=num2;  第一个月的值给到第二个月
	num2=sum;   第二个月的值给到第三个月  以此类推
}
document.write(sum); 斐波那契第12个月的值;


第三天视频
1.关键字的使用:break,continue

break关键字:如果再循环中使用,遇到了break,则立刻跳出当前所在的循环    
 案例:
找到一百和二百之间能被七整除的第一个数字
         for(var i=100;i<=200;i++){
             if(i%7==0){
             console.log(i); //找到第一个能被七整除的数字
                 break; //找到以后立刻跳出 不再循环
             }
         }

continue关键字:再循环中如果遇到continue关键字,直接开始下一次循环
案例:
// 案例：求100-200之间的所有奇数的和,用(continue);
	var num=0;
        var i=100;
        while(i<=200){
            if(i%2==0){
                // 如果是偶数---跳过这个数字
                i++;//102
                continue;
            }
            num+=i;
            i++;
        }
        document.write(num);
案例2: 求1-10之间的累加值,要求跳过所有个数为3的值
var i=1;//计数器
var num=0;储存加和的容器
while(i<=10){
	if(i%10==3){
	个位是3的数 不要
		i++;//1
		continue;
	}
	num+=i;
	i++
}
document.write(num);
2.数组---重点

数组:一组有序的数据
数组的作用:可以一次性存储多个数据
数组的定义:

1.通过构建函数来创建数组
语法:
var 数组名 = new Array();
var array = new Array();定义了一个数组
数组的名字如果直接输出,那么直接就可以把数组中的数据显示出来,如果没有数据,就看不到数据

var 数组名=new array(长度);
如果数组中没有数据,但是有长度---,数组中的每个值就是undefined

2.通过字面量的方式创建数组

var 数组名 = [];  空数组
var array = []
无论是构造函数的方式还是字面量的方式,定义数组,如果有长度,那么默认是undefined

数组:一组有序的数据
数组元素:数组中存储的每个数据,都可以叫数组的元素,如:存储了三个数据,那么数组中就有了三个元素
数组长度:就是数组的元素的个数,比如有3个元素,就说,这个数组的长度是3.
数组的索引(下角标):用来存储或者访问数组中具体的数据的,索引是从0开始的,一直到数组长度-1结束;
数组的索引和数组的长度之间的关系:长度-1就是最大索引值

如何设置数组中某个位置的值
数组名[下角标]=值;
arr[3]=100;
如何获取数组中某个位置的值
var result=数组名[下角标];
console.log(result)
3.函数---重点





妙味课堂笔记
鼠标移动到标签上弹出弹窗
inpit type="checkbox" onmouseover=“alert‘秒味课堂’”;
自动登录
onmouseover (鼠标移入标签)
onmouseout (鼠标移出标签)
document.getElementById(元素获取)

js函数
改变Div的宽、高、背景色
所有代码卸载行间很乱
script标签
函数的定义（function 变量名(判断{}）
函数的调用
变量的使用
js执行顺序

例子函数的调用（改变样式鼠标经过鼠标移开 ）
<script>
	function（函数） toGreen() {
			var odiv1=document.getElementById（'div1'）;鼠标经过改变的样式
		odiv1.style.width='200px'
		odiv1.style.height='200px'
		odiv1.style.background='green'
}
	function（函数） toRed() {
			var odiv1=document.getElementById（'div1'）;鼠标移开改变的样式
		odiv1.style.width='100px'
		odiv1.style.height='100px'
		odiv1.style.background='red'
}
<script/>js代码结束
函数调用        （鼠标经过用toGreen命名的样式）
<div id="div1" onmouseover="toGreen（）" onmouseout="toRed（）">
（鼠标移开用toRed命名的样式）

定时器的使用
setInterval (命名, 1000) 时隔1000毫秒弹出一次命名里的代码
setTimeout (show, 1000) 只弹出一次
两个定时器的区别

停止定时器
clearInterval 
clearTimeout

数码时钟
获取系统时间 
Date对象
getHours、getMinutes、getSeconds
显示系统时间
字符串连接
空位补零
设置图片路径
charAt方法

Date对象 其他方法
年
getDullYear()
月
getMonth()
日
getDate()
星期
getDay()


innerHTML作用是用来修改某一个标签它内部的文字
数组 用来存放元素 通过序号来提取数组中的元素
定时器的开启和关闭  每隔一段时间来执行一个操作
Date对象  用来获取当前的系统时间
字符串连接
charAt  他是一个字符串操作 它的作用是在一个大的字符串当中截取其中的某一位
数码时钟 


延时提示框
效果演示

原来方法
移入显示,移出隐藏

移出延时隐藏
移入下面的Div后,还是隐藏了

简写代码
合并两个相同的mouseover和mouseout


无缝滚动的原理
效果原理
让ul一直向左移动

复制li
innerHTML+=innerHTML
修改ul的width

滚动过界后，重设位置 if(oul.offsetLeft<oul.offsetWidth/2){
	oul.style.Left = "0px"
}

无缝滚动 （扩展）
改变滚动方向 
修改ISpeed 滚动的速度 
修改判断条件

鼠标移入暂停
移入关闭定时器
移出重新开启定时器


Dom基础
apppendchild 在什么什么之后插入. (把li一直插入到ul后面)
insertBefore  在什么什么之前插入(把li插入到ulli ,  在li的第一个元素之前插入)   

创建Dom元素
createElement(标签名)   创建一个节点
appendChild(节点)    追加一个节点
例子 -- 为ul插入li

插入元素
insertBefore(节点,原有节点)  在已有元素前插入
例子 -- 倒叙插入

删除Dom元素
removeChild(节点)   删除一个节点
例子 -- 删除li


文档碎片
文档碎片可以提高DOM操作性能（理论上）
文档碎片原理
document.createDocmentFragment()  (实际操作不仅不能提升还略微慢了一些)